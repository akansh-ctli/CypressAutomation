{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2020-09-21T17:43:29.845Z",
    "end": "2020-09-21T17:45:05.645Z",
    "duration": 95800,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2b83f752-7fe6-4325-9d33-d7b681c0f360",
      "title": "",
      "fullFile": "cypress\\integration\\sanity.feature",
      "file": "cypress\\integration\\sanity.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8b4c4e9d-6d1f-4390-b175-2bd981836b29",
          "title": "NG911 automation sanity",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Login in NG911 app and validate home page",
              "fullTitle": "NG911 automation sanity Login in NG911 app and validate home page",
              "timedOut": null,
              "duration": 34961,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f928b19b-b6fe-476c-b878-84941480e4ab",
              "parentUUID": "8b4c4e9d-6d1f-4390-b175-2bd981836b29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "validate PSAP page and there APIs",
              "fullTitle": "NG911 automation sanity validate PSAP page and there APIs",
              "timedOut": null,
              "duration": 20728,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "4ab7156e-9632-43f6-bbea-7236c43adb5b",
              "parentUUID": "8b4c4e9d-6d1f-4390-b175-2bd981836b29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "validate NGCS page and there APIs",
              "fullTitle": "NG911 automation sanity validate NGCS page and there APIs",
              "timedOut": null,
              "duration": 9905,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b6bbb220-6044-4a39-854c-2fbad7bbbce4",
              "parentUUID": "8b4c4e9d-6d1f-4390-b175-2bd981836b29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "validate INGRESS page and there APIs",
              "fullTitle": "NG911 automation sanity validate INGRESS page and there APIs",
              "timedOut": null,
              "duration": 10581,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "fe207f1c-2b20-42d7-83be-c367745a7c43",
              "parentUUID": "8b4c4e9d-6d1f-4390-b175-2bd981836b29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "validate ALARMS page and there APIs",
              "fullTitle": "NG911 automation sanity validate ALARMS page and there APIs",
              "timedOut": null,
              "duration": 10582,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a0eecb7d-0aff-4e9f-a5f1-28cf04dfa837",
              "parentUUID": "8b4c4e9d-6d1f-4390-b175-2bd981836b29",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f928b19b-b6fe-476c-b878-84941480e4ab",
            "4ab7156e-9632-43f6-bbea-7236c43adb5b",
            "b6bbb220-6044-4a39-854c-2fbad7bbbce4",
            "fe207f1c-2b20-42d7-83be-c367745a7c43",
            "a0eecb7d-0aff-4e9f-a5f1-28cf04dfa837"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 86757,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "5.1.0"
    }
  }
}